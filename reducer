#!/usr/bin/env python3
import argparse, subprocess, os
from src.vertical_reduction import trace_context, vertical_delta_debug, reduce_temp_tables
from src.horizontal_reduction import cleaning_pipeline, delta_debug
from src.initial_test import initial_run_test
from src.config import INFO_OUTPUT
from src.helper import get_queries, write_queries

# TODO: probably do not need query_path or oracle, test script should automatically find the information needed
def run_test_script(test: str, query_path: str, queries: list[str] = []):
    if queries:
        os.makedirs(os.path.dirname(query_path), exist_ok=True)
        with open(query_path, "w") as f:
            for query in queries:
                f.write(query + "\n")
    try:
        result = subprocess.run(
            [test],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        return result.returncode == 0
    except subprocess.TimeoutExpired:
        print("Test script timed out.")
        return False

def main():
    parser = argparse.ArgumentParser(description="SQL Query Reducer")
    parser.add_argument("--query", required=True, help="Path to SQL query file")
    parser.add_argument("--test", required=True, help="Shell script to test for the bug")
    args = parser.parse_args()
    # NULLIF(a, b) is NULL if a == b else a
    # remove column, WITH AS SELECT

    # PATH SETUP
    original_path = str(args.query)
    default_reduced_path = args.test
    test_case_path = os.environ.get("TEST_CASE_LOCATION", default_reduced_path)
    reduced_path = os.path.join(os.path.dirname(test_case_path), "query.sql")

    info_path = os.path.join(INFO_OUTPUT, "info.txt")
    os.makedirs(os.path.dirname(info_path), exist_ok=True)
    if os.path.exists(info_path):
        os.remove(info_path)

    # REDUCTION
    queries = get_queries(original_path)
    save_query = queries

    write_queries(reduced_path, save_query)
    index, errlist, msg = initial_run_test(save_query, "reduce")
    with open(info_path, "w") as f:
        f.write(str(index) + "\n")
        f.write(" ".join(msg[0].split()).strip() + "\n")
        f.write(" ".join(msg[1].split()).strip() + "\n")
        f.writelines(line + "\n" for line in errlist)
    print("INITIAL RUN:", len(save_query))
    
    # TRACE CONTEXT REDUCTION
    setup_queries, context_queries, bug_query = trace_context(save_query, index, errlist, msg)
    write_queries(reduced_path, setup_queries + context_queries + bug_query)
    if not run_test_script(args.test, reduced_path):
        write_queries(reduced_path, save_query)
        print("TRACE CONTEXT FAILED:", len(save_query))
    else:
        save_query = setup_queries + context_queries + bug_query
        print("TRACE CONTEXT SUCCESS:", len(save_query))

    # FIRST DELTA DEBUG REDUCTION
    if len(queries) > 50:
        delta_queries = setup_queries + vertical_delta_debug(setup_queries, context_queries, bug_query, lambda q: run_test_script(args.test, reduced_path, q), n=2) + bug_query
    else:
        delta_queries = vertical_delta_debug([], save_query, [], lambda q: run_test_script(args.test, reduced_path, q), n=2)
    write_queries(reduced_path, delta_queries)
    if not run_test_script(args.test, reduced_path):
        write_queries(reduced_path, save_query)
        print("FIRST DELTA DEBUG FAILED:", len(save_query))
    else:
        save_query = delta_queries
        print("FIRST DELTA DEBUG SUCCESS:", len(save_query))

    # QUERY CLEAN UP REDUCTION
    cleaned_queries = [cleaning_pipeline(q) for q in save_query]
    write_queries(reduced_path, cleaned_queries)
    if not run_test_script(args.test, reduced_path):
        write_queries(reduced_path, save_query)
        print("FIRST CLEANED FAILED:", len(save_query))
    else:
        save_query = cleaned_queries
        print("FIRST CLEANED SUCCESS:", len(save_query))

    # CLEANING, TODO: add more?
    cleaned_query: list[str] = []
    for query in save_query:
        if query.startswith("WITH"):
            cleaned_query.append(reduce_temp_tables(query))
        else:
            cleaned_query.append(query)
    write_queries(reduced_path, cleaned_query)
    if not run_test_script(args.test, reduced_path):
        write_queries(reduced_path, save_query)
        print("SECOND CLEANED FAILED:", len(save_query))
    else:
        save_query = cleaned_query
        print("SECOND CLEANED SUCCESS:", len(save_query))

    # SECOND DELTA DEBUG REDUCTION
    if len(queries) > 50 and len(save_query) < 30:
        delta_queries = vertical_delta_debug([], save_query, [], lambda q: run_test_script(args.test, reduced_path, q), n=2)
        write_queries(reduced_path, delta_queries)
        if not run_test_script(args.test, reduced_path):
            write_queries(reduced_path, save_query)
            print("SECOND DELTA DEBUG FAILED:", len(save_query))
        else:
            save_query = delta_queries
            print("SECOND DELTA DEBUG SUCCESS:", len(save_query))

    delta_query = delta_debug(" ".join(save_query), lambda q: run_test_script(args.test, reduced_path, q)) #group_by_statement(delta_tokens)
    delta_queries = [q.strip() + ";" for q in delta_query.split(";") if q.strip()]
    write_queries(reduced_path, delta_queries)
    if not run_test_script(args.test, reduced_path):
        write_queries(reduced_path, save_query)
        print("THIRD DELTA DEBUG FAILED:", len(save_query))
    else:
        save_query = delta_queries
        print("THIRD DELTA DEBUG SUCCESS:", len(save_query))

    # QUERY CLEAN UP REDUCTION
    cleaned_queries = [cleaning_pipeline(q) for q in save_query]
    write_queries(reduced_path, cleaned_queries)
    if not run_test_script(args.test, reduced_path):
        write_queries(reduced_path, save_query)
        print("FIRST CLEANED FAILED:", len(save_query))
    else:
        save_query = cleaned_queries
        print("FIRST CLEANED SUCCESS:", len(save_query))

    # TRACE CONTEXT REDUCTION
    setup_queries, context_queries, bug_query = trace_context(save_query, len(save_query)-1, errlist, msg)
    write_queries(reduced_path, setup_queries + context_queries + bug_query)
    if not run_test_script(args.test, reduced_path):
        write_queries(reduced_path, save_query)
        print("TRACE CONTEXT FAILED:", len(save_query))
    else:
        save_query = setup_queries + context_queries + bug_query
        print("TRACE CONTEXT SUCCESS:", len(save_query))

    # FINAL RESULT FOR DEBUGGING
    run_test_script(args.test, reduced_path)

if __name__ == "__main__":
    main()
